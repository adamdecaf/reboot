Dispatch
========

*Dispatch* is a library for asynchronous HTTP interaction. It provides
 a Scala vocabulary for Java's [async-http-client][ahc]. The latest
 release version is [**$version$**]($version_link$).

> For information on Dispatch 0.8.x, see
  [dispatch-classic](http://dispatch-classic.databinder.net/).

[ahc]: https://github.com/AsyncHttpClient/async-http-client
[classic]: http://dispatch-classic.databinder.net/

### Diving in

If you have [sbt][sbt] installed, Dispatch is two steps away. Open a
shell and change to an empty or unimportant directory, then paste:

[sbt]: https://github.com/harrah/xsbt/wiki/

    echo 'libraryDependencies += 
      "net.databinder.dispatch" %% "dispatch-core" % "$version$"' > build.sbt
    sbt console

After "the internet" has downloaded, you're good to go.

### Defining requests

We'll start with a very simple request.

```scala
import dispatch._
val svc = url("http://api.hostip.info/country.php")
val country = Http(svc OK as.String)
```

The above defines and initiates a request to the given host where 2xx
responses are handled as a string. Since Dispatch is fully
asynchronous, `country` represents a *promise* of the string rather
than the string itself.

### Deferring action

You can act on the response once it's available with a
*for-expression*.

```scala
for (c <- country)
  println(c)
```

This for-expression applies to any *successful* response that is
eventually produced. If no successful response is produced, nothing is
printed. This is how for-expressions work in general. Consider a more
familiar example:

```scala
val opt: Option[String] = None
for (o <- opt)
  println(o)
```

An *option* may or may not contain a value, just like a promise may or
may not produce a successful response. But while any given option
already knows what it is, a promise may not. So the promise behaves
asynchronously in for-expressions, to avoid holding up operations
subsequent that do not depend on its value.

### Demanding answers

As with options, you can assert that a promised value be available at
any time with the use of `apply`:

```scala
val c = country()
```

But the wise use of promises defers this operation as long as is
practical, or doesn't perform it at all. To see how, keep reading.
